#version 330 core
//fragment shader for the snowman

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

struct Light {
  vec3 direction;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};
uniform Light light;

struct SpotLight {
  vec3 position;
  vec3 direction;
  float cutOff;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};
uniform SpotLight spotLight;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};

uniform Material material;

void main() {

  //Combination of two textures - dirty and clean snow
  vec3 mix = vec3(mix(texture(first_texture, aTexCoord), texture(second_texture, aTexCoord),0.5f));
  vec3 norm = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 result = vec3(0, 0, 0);

  //Calc Spotlight - (Light pole)//////////////////////////////////////////////////////
  vec3 lightDir = normalize(spotLight.position - aPos);
  float theta = dot(lightDir, normalize(-spotLight.direction));
  if(theta > spotLight.cutOff) {
    // ambient
    vec3 ambient  = spotLight.ambient  * mix;

    // diffuse shading
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse  = spotLight.diffuse  * diff * mix;

    // specular shading
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = spotLight.specular * spec * mix;

    result = (ambient + diffuse + specular);
  }


  //CalcDir light - (Sun)//////////////////////////////////////////////////////////////
  //ambient
  vec3 ambient = light.ambient * mix;

  //diffuse
  lightDir = normalize(-light.direction);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff * mix;

  // specular
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * mix;

  vec3 result2 = (ambient + diffuse + specular);
  ///////////////////////////////////////////////////////////////////////////////////////


  //if sun is on, reduce spotlight intensity
  if (length(result) > 0) {
    fragColor = vec4((result/2) + result2, 1.0);
  } else {
    fragColor = vec4(result + result2 , 1.0);
  }
}
